---
name: Acid tests

trigger:
  batch: true
  paths:
    exclude:
      - readme.md
      - .gitignore
      - LICENSE
      - .pre-commit-config.yaml
schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly test
    branches:
      include:
        - master
    always: true
pr: none
pool:
  vmImage: ubuntu-20.04

resources:
  repositories:
    - repository: acid
      type: github
      name: Accelize/acid
      endpoint: Accelize
      ref: refs/heads/v1
  pipelines:
    - pipeline: acidTrigger
      source: Acid trigger
      trigger:
        branches:
          - v1

stages:
  - stage: noAgentsTests
    displayName: Tests without agents
    jobs:
      - job:
        displayName: Lint tests
        dependsOn: []
        variables:
          cacheDir: /tmp/.pipeline_cache
        steps:

          - checkout: self
            submodules: true

          - script: git submodule update --remote --init --force
            displayName: Ensure submodule is up to date

          - task: Cache@2
            inputs:
              key: noAgentsTests
              path: $(cacheDir)
            displayName: Cache packages

          - script: |
              echo "##vso[task.prependpath]$HOME/.local/bin"
              pip install --disable-pip-version-check --cache-dir $(cacheDir)/.pip_packages -U ansible flake8 yamllint ansible-lint black bandit
            displayName: Get dependencies
            condition: always()

          - script: flake8
            displayName: Lint Python modules
            condition: always()

          - script: black . --check --diff
            displayName: Check black style is applied
            condition: always()

          - script: bandit acidcli -rs B404,B603
            displayName: Check Python security
            condition: always()

          - script: yamllint -s acidcli
            displayName: Lint YAML files
            condition: always()

          - script: ansible-lint acidcli
            displayName: Lint Ansible configuration
            condition: always()

          - template: terraform-lint-steps-template.yml
            parameters:
              agents:
                - awsEc2
                - azureVm

  - stage: templatesTests
    displayName: Tests pipelines templates
    jobs:

      # Start
      - template: agents/start.yml@acid
        parameters:
          jobName: startAgent_AwsEc2_centOs7
          agentDescription: AWS EC2 CentOS 7
          provider: awsEc2
          image: centos_7
          instanceType: t3a.nano
          ansiblePlaybook: tests/playbook.yml
          ansibleRequirements: tests/requirements.yml
          volumeSize: 15

      - template: agents/start.yml@acid
        parameters:
          jobName: startAgent_AwsEc2_centOs8
          agentDescription: AWS EC2 CentOS 8
          provider: awsEc2
          image: centos_8
          instanceType: t3a.nano

      - template: agents/start.yml@acid
        parameters:
          jobName: startAgent_AzureVm_centOs7
          agentDescription: Azure VM CentOS 7
          provider: azureVm
          image: centos_7
          instanceType: Standard_B1ls
          spot: false
          inMemoryWorkDir: true
          volumeSize: 70

      - template: agents/start.yml@acid
        parameters:
          jobName: startAgent_AzureVm_ubuntu1804
          agentDescription: Azure VM Ubuntu 18.04
          provider: azureVm
          image: ubuntu_18_04
          instanceType: Standard_B1ls
          ansiblePlaybook: tests/playbook.yml
          ansibleRequirements: tests/requirements.yml

      # Tests
      - job: runTests_AwsEc2_centOs7
        displayName: Run tests on AWS EC2 CentOS 7
        dependsOn: startAgent_AwsEc2_centOs7
        pool:
          name: Default
          demands:
            - agent.Name -equals $(Build.BuildId) AWS EC2 CentOS 7
        steps:
          - template: test-steps-template.yml

      - job: runTests_AwsEc2_centOs8
        displayName: Run tests on AWS EC2 CentOS 8
        dependsOn: startAgent_AwsEc2_centOs8
        pool:
          name: Default
          demands:
            - agent.Name -equals $(Build.BuildId) AWS EC2 CentOS 8
        steps:
          - template: test-steps-template.yml

      - job: runTests_AzureVm_centOs7
        displayName: Run tests on Azure VM CentOS 7
        dependsOn: startAgent_AzureVm_centOs7
        pool:
          name: Default
          demands:
            - agent.Name -equals $(Build.BuildId) Azure VM CentOS 7
        steps:
          - template: test-steps-template.yml

      - job: runTests_AzureVm_ubuntu1804
        displayName: Run tests on Azure VM Ubuntu 18.04
        dependsOn: startAgent_AzureVm_ubuntu1804
        pool:
          name: Default
          demands:
            - agent.Name -equals $(Build.BuildId) Azure VM Ubuntu 18.04
        steps:
          - template: test-steps-template.yml

      # Stop
      - template: agents/stop.yml@acid
        parameters:
          jobName: stopAgent_AwsEc2_centOs7
          provider: awsEc2
          agentDescription: AWS EC2 CentOS 7
          dependsOn: runTests_AwsEc2_centOs7

      - template: agents/stop.yml@acid
        parameters:
          jobName: stopAgent_AwsEc2_centOs8
          provider: awsEc2
          agentDescription: AWS EC2 CentOS 8
          dependsOn: runTests_AwsEc2_centOs8

      - template: agents/stop.yml@acid
        parameters:
          jobName: stopAgent_AzureVm_centOs7
          provider: azureVm
          agentDescription: Azure VM CentOS 7
          dependsOn: runTests_AzureVm_centOs7

      - template: agents/stop.yml@acid
        parameters:
          jobName: stopAgent_AzureVm_ubuntu1804
          provider: azureVm
          agentDescription: Azure VM Ubuntu 18.04
          dependsOn: runTests_AzureVm_ubuntu1804

  - stage: cliTests
    displayName: Tests acid-cli
    dependsOn: noAgentsTests
    jobs:
      - job:
        displayName: Tests acid-cli
        variables:
          - group: acidTests
          - name: cacheDir
            value: /tmp/.acid/lib  # Application cache dir

        steps:

          - checkout: self
            submodules: true

          - task: Cache@2
            inputs:
              key: cliTests
              path: $(cacheDir)
            displayName: Cache packages

          - script: |
              echo "##vso[task.prependpath]$HOME/.local/bin"
              pip install --disable-pip-version-check --cache-dir $(cacheDir)/.pip_packages pytest-cov
            displayName: Get dependencies
            condition: always()

          - script: |
              ./setup.py bdist_wheel
              pip install dist/*.whl --cache-dir $(cacheDir)/.pip_packages
            displayName: Install

          - task: AWSShellScript@1
            displayName: Run tests
            inputs:
              awsCredentials: AWS
              regionName: eu-west-1
              scriptType: inline
              inlineScript: pytest --installed --tb=short
            env:
              ACID_USER_DIR: /tmp/.acid

          - script: bash <(curl -s https://codecov.io/bash)
            displayName: Upload Coverage
            env:
              CODECOV_TOKEN: $(codecovToken)

  - stage: publish
    displayName: Publish acid-cli
    dependsOn:
      - cliTests
      - templatesTests
    jobs:
      - job:
        displayName: Publish acid-cli
        variables:
          - group: twine
        steps:

          - checkout: self
            submodules: true

          - script: git submodule update --remote --init --force
            displayName: Ensure submodule is up to date

          - task: PythonScript@0
            displayName: Checks if PyPI is up to date
            inputs:
              scriptSource: inline
              script: |
                from xml.etree.ElementTree import fromstring
                from urllib.request import urlopen

                with urlopen("https://pypi.org/rss/project/acidcli/releases.xml") as resp:
                    releases = fromstring(resp.read())
                latest = releases.find("channel").find("item").find("title").text
                print(f'Latest published version: "{latest}"')

                with open("acidcli/acid/version", "rt") as version_file:
                    current = version_file.read().strip().lstrip("v")
                print(f'Current build version: "{current}"')

                to_update = latest != current
                print(f'Update required: "{to_update}"')
                print(f"##vso[task.setvariable variable=toUpdate]{to_update}")

          - script: ./setup.py bdist_wheel
            displayName: Build
            condition: and(succeeded(), eq(variables.toUpdate, 'True'))

          - script: |
              echo "##vso[task.prependpath]$HOME/.local/bin"
              pip install --disable-pip-version-check --no-cache-dir twine
            displayName: Get Twine
            condition: and(succeeded(), eq(variables.toUpdate, 'True'))

          - script: twine upload --non-interactive --disable-progress-bar dist/*
            displayName: Publish package on PyPI
            env:
              TWINE_PASSWORD: $(twinePassword)
              TWINE_USERNAME: $(twineUsername)
            condition: and(succeeded(), eq(variables.toUpdate, 'True'))
